
server:
  port: ${PORT:8099}

spring:
  application:
    name: schema-kafka

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false
    generate-ddl: true

  kafka:
    properties:
      specific.avro.reader: true
      schema.registry.url: http://localhost:8082
      bootstrap-servers: http://localhost:9092
    producer:
      key-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      group-id: greatests-finance
    consumer:
      key-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      group-id: greatests-finance

auto:
  create:
    topics:
      enable: true

kafka:
  bootstrapServers: 127.0.0.1:9092
  acksConfig: all
  retriesConfig: 10
  schemaRegistryUrl: "http://127.0.0.1:8082"

  configs:
    schema-registry: http://localhost:8082
    bootstrap-servers: http://localhost:9092
    value:
      serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    key:
      serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
  topics:
    employee: employee-topic

app:
  title: schema-kafka
  version: 0.0.1

management:
  endpoints:
    web:
      base-path: /
    exposure:
      include: metrics,health
    metrics:
      enabled: true
    health:
      show-details: always